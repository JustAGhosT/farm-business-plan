name: Deploy to Netlify

on:
  push:
    branches: [main, develop]
    paths:
      - "app/**"
      - "components/**"
      - "types/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - "next.config.js"
      - "tsconfig.json"
      - "tailwind.config.ts"
      - "postcss.config.js"
      - ".eslintrc.json"
      - "netlify.toml"
      - ".github/workflows/netlify-deploy.yml"
  pull_request:
    paths:
      - "app/**"
      - "components/**"
      - "types/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - "next.config.js"
      - "tsconfig.json"
      - "tailwind.config.ts"
      - "postcss.config.js"
      - ".eslintrc.json"
      - "netlify.toml"
      - ".github/workflows/netlify-deploy.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      statuses: write
      pull-requests: write
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ssh-key: ${{ secrets.DEPLOY_NETLIFY }}

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Validate environment variables before build
      - name: Validate environment variables
        run: pnpm run validate:env
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://build:build@localhost:5432/build' }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET || 'build-time-secret-only' }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL || 'http://localhost:3000' }}
          GITHUB_ID: ${{ secrets.GITHUB_ID }}
          GITHUB_SECRET: ${{ secrets.GITHUB_SECRET }}
          NEXT_PUBLIC_GITHUB_ENABLED: ${{ secrets.GITHUB_ID != '' && 'true' || 'false' }}
          GOOGLE_ID: ${{ secrets.GOOGLE_ID }}
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
          NEXT_PUBLIC_GOOGLE_ENABLED: ${{ secrets.GOOGLE_ID != '' && 'true' || 'false' }}

      # Run tests before deployment (if available)
      # - name: Run tests
      #   run: npm test

      - name: Type Check
        run: npx tsc --noEmit

      - name: Build
        run: pnpm run build:skip-validation
        env:
          # Add any build-time environment variables here
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          # OAuth - only include if secrets exist
          GITHUB_ID: ${{ secrets.GITHUB_ID }}
          GITHUB_SECRET: ${{ secrets.GITHUB_SECRET }}
          NEXT_PUBLIC_GITHUB_ENABLED: ${{ secrets.GITHUB_ID != '' && 'true' || 'false' }}
          GOOGLE_ID: ${{ secrets.GOOGLE_ID }}
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
          NEXT_PUBLIC_GOOGLE_ENABLED: ${{ secrets.GOOGLE_ID != '' && 'true' || 'false' }}

      - name: Check Netlify secrets
        id: check_secrets
        run: |
          if [ -n "${{ secrets.NETLIFY_AUTH_TOKEN }}" ] && [ -n "${{ secrets.NETLIFY_SITE_ID }}" ]; then
            echo "secrets_available=true" >> $GITHUB_OUTPUT
          else
            echo "secrets_available=false" >> $GITHUB_OUTPUT
            echo "Warning: Netlify secrets not configured. Skipping deployment."
            echo "Missing secrets:"
            [ -z "${{ secrets.NETLIFY_AUTH_TOKEN }}" ] && echo "  - NETLIFY_AUTH_TOKEN"
            [ -z "${{ secrets.NETLIFY_SITE_ID }}" ] && echo "  - NETLIFY_SITE_ID"
          fi

      - name: Install Netlify CLI
        if: steps.check_secrets.outputs.secrets_available == 'true'
        run: pnpm install -g netlify-cli

      - name: Deploy to Netlify (Production)
        if: steps.check_secrets.outputs.secrets_available == 'true' && github.ref == 'refs/heads/main'
        run: netlify deploy --prod --message="Production deploy from main branch"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Deploy to Netlify (Staging)
        if: steps.check_secrets.outputs.secrets_available == 'true' && github.ref == 'refs/heads/develop'
        run: netlify deploy --prod --message="Staging deploy from develop branch"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  preview-deploy:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      statuses: write
      pull-requests: write
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Validate environment variables before build
      - name: Validate environment variables
        run: pnpm run validate:env
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://build:build@localhost:5432/build' }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET || 'build-time-secret-only' }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL || 'http://localhost:3000' }}
          GITHUB_ID: ${{ secrets.GITHUB_ID }}
          GITHUB_SECRET: ${{ secrets.GITHUB_SECRET }}
          NEXT_PUBLIC_GITHUB_ENABLED: ${{ secrets.GITHUB_ID != '' && 'true' || 'false' }}
          GOOGLE_ID: ${{ secrets.GOOGLE_ID }}
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
          NEXT_PUBLIC_GOOGLE_ENABLED: ${{ secrets.GOOGLE_ID != '' && 'true' || 'false' }}

      # Run tests before deployment (if available)
      # - name: Run tests
      #   run: npm test

      - name: Type Check
        run: npx tsc --noEmit

      - name: Build
        run: pnpm run build:skip-validation
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          # OAuth - only include if secrets exist
          GITHUB_ID: ${{ secrets.GITHUB_ID }}
          GITHUB_SECRET: ${{ secrets.GITHUB_SECRET }}
          NEXT_PUBLIC_GITHUB_ENABLED: ${{ secrets.GITHUB_ID != '' && 'true' || 'false' }}
          GOOGLE_ID: ${{ secrets.GOOGLE_ID }}
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
          NEXT_PUBLIC_GOOGLE_ENABLED: ${{ secrets.GOOGLE_ID != '' && 'true' || 'false' }}

      - name: Check Netlify secrets (Preview)
        id: check_secrets_preview
        run: |
          if [ -n "${{ secrets.NETLIFY_AUTH_TOKEN }}" ] && [ -n "${{ secrets.NETLIFY_SITE_ID }}" ]; then
            echo "secrets_available=true" >> $GITHUB_OUTPUT
          else
            echo "secrets_available=false" >> $GITHUB_OUTPUT
            echo "Warning: Netlify secrets not configured. Skipping preview deployment."
            echo "Missing secrets:"
            [ -z "${{ secrets.NETLIFY_AUTH_TOKEN }}" ] && echo "  - NETLIFY_AUTH_TOKEN"
            [ -z "${{ secrets.NETLIFY_SITE_ID }}" ] && echo "  - NETLIFY_SITE_ID"
          fi

      - name: Install Netlify CLI
        if: steps.check_secrets_preview.outputs.secrets_available == 'true'
        run: pnpm install -g netlify-cli

      - name: Sanitize branch name for Netlify alias
        id: sanitize_branch_name
        if: steps.check_secrets_preview.outputs.secrets_available == 'true'
        run: |
          # Sanitize branch name for Netlify alias (lowercase, replace / with -, remove invalid chars)
          SAFE_ALIAS=$(echo "${{ github.head_ref }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          echo "safe_alias=$SAFE_ALIAS" >> $GITHUB_OUTPUT
          echo "Original branch: ${{ github.head_ref }}"
          echo "Safe alias: $SAFE_ALIAS"

      - name: Deploy Preview to Netlify
        if: steps.check_secrets_preview.outputs.secrets_available == 'true'
        run: |
          netlify deploy --alias="${{ steps.sanitize_branch_name.outputs.safe_alias }}" --message="Deploy Preview from PR #${{ github.event.pull_request.number }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
